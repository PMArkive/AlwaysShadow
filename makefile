# AlwaysShadow - a program for forcing Shadowplay's Instant Replay to stay on.
# Copyright (C) 2023 Aviv Edery.

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

CC:=gcc
BIN:=bin
SRC:=src
INCL:=include
RESRC:=resources
PROG:=$(BIN)/AlwaysShadow.exe
RELEASE:="$$HOME"/Desktop/AlwaysShadow.zip
FLAGFILE:=$(BIN)/cflags.txt
VERSIONFILE:=version.txt

# Auto detect files we want to compile.
CFILES:=$(wildcard $(SRC)/*.c)
RFILES:=$(wildcard $(RESRC)/*.rc)

OBJS += $(patsubst $(SRC)/%.c,$(BIN)/%.o,$(CFILES))
OBJS += $(patsubst $(RESRC)/%.rc,$(BIN)/%.o,$(RFILES))

# Files generated by compiler for recompiling based on changed dependencies.
DEPENDS:=$(patsubst $(SRC)/%.c,$(BIN)/%.d,$(CFILES))

# The style of commenting below may seem funny but there's a reason, it's so the alignment spacing doesn't make the output ugly.
# C compiler flags.
CFLAGS += -c #                          Compile, duh.
CFLAGS += -I $(INCL) #                  Search for #includes in this folder.
CFLAGS += -Wall #                       All warnings (minus the ones we'll subtract now).
CFLAGS += -Wno-unknown-pragmas #        For getting rid of warnings about regions in the code.
CFLAGS += -fmacro-prefix-map=$(SRC)/= # Makes it so in the logs only basenames of files are printed.
CFLAGS += -MMD -MP #                    Generate *.d files, used for detecting if we need to recompile due to a change in included headers.
CFLAGS += -D CURL_STATICLIB #           Mandatory for statically linking curl.

# Linker flags.
LFLAGS += -Wall #     All warnings.
LFLAGS += -mwindows # Makes it so when you run the program it doesn't open cmd.
LFLAGS += -static #   For static linking so people don't have problems (they've had a few).

# Libraries that we link.
LIBS += -lpthread #   For multithreading.
LIBS += -lwbemuuid #  For WMI to get the command line of processes. 
LIBS += -lole32 #     For COM to get the command line of processes.
LIBS += -loleaut32 #  For working with BSTRs.
LIBS += -luuid #      For FOLDERID_LocalAppData.
LIBS += -lshlwapi #   For path functions.

# Output of `pkg-config --libs --static regex`. It's regex and all its dependencies.
LIBS += -lregex
LIBS += -ltre
LIBS += -lintl

# Output by `pkg-config --libs --static libcurl`. It's libcurl and all its dependencies.
LIBS += -lcurl
LIBS += -lidn2
LIBS += -lssh2
LIBS += -lpsl
LIBS += -lbcrypt
LIBS += -ladvapi32
LIBS += -lcrypt32
LIBS += -lbcrypt
LIBS += -lwldap32
LIBS += -lzstd
LIBS += -lbrotlidec
LIBS += -lz
LIBS += -lws2_32
LIBS += -lidn2
LIBS += -liconv
LIBS += -lunistring
LIBS += -lbrotlidec
LIBS += -lbrotlicommon

# Used by enough rules that it makes sense to not repeat it. Probably a better way to do that than this but whatever.
DEFINE_CONFIRM_FUNC:=confirm() { local choice; read -p "$$1 " choice; [[ "$$choice" == *([[:space:]])[yY]* ]]; }

# Pass variables debug=yes/no, unicode=yes/no to control build settings.
unicode = yes
debug = no

ifeq ($(strip $(unicode)),yes)
	CFLAGS += -D UNICODE -D _UNICODE
endif

ifeq ($(strip $(debug)),yes)
	CFLAGS += -D DEBUG_BUILD
endif

.PHONY: all release run runx log inc_version write_flagfile clean

# Makes a build. Order is important.
all: | $(VERSIONFILE)

# Support version overrides for debugging purposes.
# CFLAGS can't be appended to in a subtarget, because it won't persist outside the scope of that target.
ifdef version
all: CFLAGS += -D PROGRAM_VERSION=$(version)
else
all: CFLAGS += -D PROGRAM_VERSION=$(file < $(VERSIONFILE))
endif

all: write_flagfile $(PROG)

# Creates a release inside a zip and pushes it to GitHub.
# Make runs each line in a subshell, so we must use escapes to make the script a "one-liner".
# TODO: Don't really like a few things, VERSIONFILE is too easy to increment and push without actually creating a new release.
release: clean inc_version all
	rm -f $(RELEASE)
	7z a -tzip $(RELEASE) ./$(PROG)

	$(DEFINE_CONFIRM_FUNC);\
	if confirm "Generated a build in $(RELEASE). Try it, then press Y to continue."; then\
		gh release create $(RELEASE);\
		git add $(VERSIONFILE);\
		@echo "$(VERSIONFILE) has been staged. You should push it whenever you're ready";\
	fi

inc_version: | $(VERSIONFILE)
	$(DEFINE_CONFIRM_FUNC);\
	if confirm "Increment version number?"; then\
		version=$$(cat $(VERSIONFILE));\
		echo $$(( version + 1 )) > $(VERSIONFILE);\
	fi

# Writes CFLAGS to a file only if it's changed from the last run. We use this to recompile binaries when changing to/from debug builds.
# Important that this target isn't simply called $(FLAGFILE), that's a different target which we use.
write_flagfile:
	if [[ ! -f $(FLAGFILE) ]] || ! diff -q <(echo "$(CFLAGS)") $(FLAGFILE); then echo "$(CFLAGS)" > $(FLAGFILE); fi

# Compiles and runs. Output streams are redirected to a log.
run: all runx

# "Run exclusively". Same as run, but won't try to compile it.
runx:
	$(DEFINE_CONFIRM_FUNC);\
	$(PROG) & pid=$$!; confirm "Press Y when you're ready to kill it..." && kill $$pid

log:
	tail -f "$$LOCALAPPDATA"/AlwaysShadow/output.log

# Empties the bin folder.
clean:
	rm -f $(BIN)/*

# The '-' is important, supposedly.
-include $(DEPENDS)

# The following targets do the actual job of compiling and linking all the different files. You'll probably never run them directly.
$(PROG): $(OBJS)
	$(CC) $(LFLAGS) $(OBJS) $(LIBS) -o $@

$(BIN)/%.o: $(SRC)/%.c $(FLAGFILE) | $(BIN)
	$(CC) $(CFLAGS) -o $@ $<

# For .c files we are able to autogenerate dependency files, but for .rc files we can't so we'll just make it depend on all headers.
$(BIN)/%.o: $(RESRC)/%.rc $(INCL)/*.h | $(BIN)
	windres -Iinclude -o $@ $<

$(BIN):
	mkdir -p $@

$(VERSIONFILE):
	echo 0 > $(VERSIONFILE)
